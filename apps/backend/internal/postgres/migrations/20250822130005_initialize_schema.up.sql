CREATE EXTENSION hstore;

CREATE TYPE "invitation_status" AS ENUM (
  'pending',
  'accepted',
  'expired'
);

CREATE TYPE "user_status" AS ENUM (
  'active',
  'suspended',
  'deactivated'
);

CREATE TYPE "mediable_type" AS ENUM (
  'user',
  'article',
  'team',
  'event',
  'comment',
  'external_site'
);

CREATE TYPE "interactive_type" AS ENUM (
  'article',
  'comment',
  'event'
);

CREATE TYPE "taggable_type" AS ENUM (
  'article',
  'team',
  'event'
);

CREATE TYPE "agent_type" AS ENUM (
  'user',
  'team'
);

CREATE TYPE "participation_status" AS ENUM (
  'attending',
  'no_longer_attending'
);

CREATE TABLE "tag_type" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT UNIQUE NOT NULL,
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "object_tag" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "taggable_id" INT NOT NULL,
  "taggable_type" taggable_type NOT NULL,
  "tag_type_id" INT NOT NULL REFERENCES "tag_type" ("id") ON DELETE CASCADE
);

CREATE TABLE "faculty" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "key_name" TEXT UNIQUE NOT NULL,
  CHECK(LENGTH("key_name") <= 64)
);

CREATE TABLE "faculty_translation" (
  "faculty_id" INT NOT NULL REFERENCES "faculty" ("id") ON DELETE CASCADE,
  "language_code" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  PRIMARY KEY ("faculty_id", "language_code"),
  CHECK(LENGTH("language_code") = 2),
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "department" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "faculty_id" INT REFERENCES "faculty" ("id") ON DELETE RESTRICT DEFAULT (NULL),
  "key_name" TEXT UNIQUE NOT NULL,
  CHECK(LENGTH("key_name") <= 64)
);

CREATE TABLE "department_translation" (
  "department_id" INT NOT NULL REFERENCES "department" ("id") ON DELETE CASCADE,
  "language_code" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  PRIMARY KEY ("department_id", "language_code"),
  CHECK(LENGTH("language_code") = 2),
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "course" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "department_id" INT REFERENCES "department" ("id") ON DELETE RESTRICT DEFAULT (NULL),
  "key_name" TEXT UNIQUE NOT NULL,
  CHECK(LENGTH("key_name") <= 64)
);

CREATE TABLE "course_translation" (
  "course_id" INT NOT NULL REFERENCES "course" ("id") ON DELETE CASCADE,
  "language_code" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  PRIMARY KEY ("course_id", "language_code"),
  CHECK(LENGTH("language_code") = 2),
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "role" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "key_name" TEXT UNIQUE NOT NULL,
  "description" TEXT DEFAULT (NULL),
  CHECK(LENGTH("key_name") <= 64)
);

CREATE TABLE "role_translation" (
  "role_id" INT NOT NULL REFERENCES "role" ("id") ON DELETE CASCADE,
  "language_code" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  "description" TEXT DEFAULT (NULL),
  PRIMARY KEY ("role_id", "language_code"),
  CHECK(LENGTH("language_code")=2),
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "permission" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "key_name" TEXT UNIQUE NOT NULL,
  "description" TEXT DEFAULT (NULL),
  CHECK(LENGTH("key_name") <= 64)
);

CREATE TABLE "permission_translation" (
  "permission_id" INT NOT NULL REFERENCES "permission" ("id") ON DELETE CASCADE,
  "language_code" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  "description" TEXT DEFAULT (NULL),
  PRIMARY KEY ("permission_id", "language_code"),
  CHECK(LENGTH("language_code")=2),
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "role_permission" (
  "role_id" INT NOT NULL REFERENCES "role" ("id") ON DELETE CASCADE,
  "permission_id" INT NOT NULL REFERENCES "permission" ("id") ON DELETE CASCADE,
  PRIMARY KEY ("role_id", "permission_id")
);

CREATE TABLE "user" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "course_id" INT NOT NULL REFERENCES "course" ("id") ON DELETE SET NULL,
  "role_id" INT NOT NULL REFERENCES "role" ("id") ON DELETE RESTRICT,
  "student_id" TEXT UNIQUE NOT NULL,
  "first_name" TEXT NOT NULL,
  "middle_name" TEXT DEFAULT (NULL),
  "last_name" TEXT NOT NULL,
  "display_name" TEXT DEFAULT (NULL),
  "headline" TEXT DEFAULT (NULL),
  "description" TEXT DEFAULT (NULL),
  "email" TEXT UNIQUE NOT NULL,
  "password_hash" TEXT NOT NULL,
  "status" user_status NOT NULL DEFAULT 'active',
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("student_id") = 8 AND "student_id" LIKE 'tk%'),
  CHECK(LENGTH("first_name") <= 64),
  CHECK(LENGTH("middle_name") <= 64),
  CHECK(LENGTH("last_name") <= 64),
  CHECK(LENGTH("display_name") <= 64),
  CHECK(LENGTH("headline") <= 64),
  CHECK(LENGTH("email") <= 254)
);

CREATE TABLE "invitation" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "invited_by_user_id" INT REFERENCES "user" ("id") ON DELETE SET NULL,
  "student_id" TEXT NOT NULL,
  "email" TEXT NOT NULL,
  "token" TEXT UNIQUE NOT NULL,
  "role_id" INT NOT NULL REFERENCES "role" ("id") ON DELETE RESTRICT,
  "expires_at" TIMESTAMPTZ NOT NULL,
  "status" invitation_status NOT NULL DEFAULT 'pending',
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  CHECK(LENGTH("student_id") = 8 AND "student_id" LIKE 'tk%'),
  CHECK(LENGTH("email") <= 254)
);

CREATE UNIQUE INDEX student_id_active_constraint ON "invitation" ("student_id")
WHERE "status" = 'pending';

CREATE UNIQUE INDEX email_active_constraint ON "invitation" ("email")
WHERE "status" = 'pending';

CREATE TABLE "programming_skill" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT UNIQUE NOT NULL,
  "external_link" TEXT DEFAULT (NULL),
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "user_programming_skill" (
  "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "programming_skill_id" INT NOT NULL REFERENCES "programming_skill" ("id") ON DELETE CASCADE,
  "duration" INT DEFAULT (NULL),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  PRIMARY KEY ("user_id", "programming_skill_id"),
  CHECK("duration" >= 0)
);

CREATE TABLE "external_site" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "holder_id" INT NOT NULL,
  "holder_type" agent_type NOT NULL,
  "external_link" TEXT NOT NULL,
  "name" TEXT NOT NULL,
  "description" TEXT DEFAULT (NULL),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("name") <= 255)
);

CREATE TABLE "media" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "uploader_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "filename" TEXT NOT NULL,
  "filesize" INT DEFAULT (NULL),
  "mime_type" TEXT NOT NULL,
  "description" TEXT NOT NULL,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("filename") <= 255),
  CHECK(LENGTH("mime_type") <= 255)
);

CREATE TABLE "object_media" (
  "media_id" INT NOT NULL REFERENCES "media" ("id") ON DELETE CASCADE,
  "object_id" INT NOT NULL,
  "object_type" mediable_type NOT NULL,
  PRIMARY KEY ("media_id", "object_id", "object_type")
);

CREATE TABLE "team" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT UNIQUE NOT NULL,
  "owner_id" INT REFERENCES "user" ("id") ON DELETE SET NULL,
  "headline" TEXT DEFAULT (NULL),
  "description" TEXT DEFAULT (NULL),
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("name") <= 64),
  CHECK(LENGTH("headline") <= 64)
);

CREATE TABLE "user_team" (
  "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "team_id" INT NOT NULL REFERENCES "team" ("id") ON DELETE CASCADE,
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  PRIMARY KEY ("user_id", "team_id")
);

CREATE TABLE "article" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" TEXT NOT NULL,
  "markdown_text" TEXT NOT NULL,
  "is_public" BOOLEAN NOT NULL DEFAULT (FALSE),
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  "updated_at" TIMESTAMPTZ DEFAULT (NULL),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("title") <= 64)
);

CREATE TABLE "article_author" (
  "article_id" INT NOT NULL REFERENCES "article" ("id") ON DELETE CASCADE,
  "author_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  PRIMARY KEY ("article_id", "author_id")
);

CREATE TABLE "team_article" (
  "team_id" INT NOT NULL REFERENCES "team" ("id") ON DELETE CASCADE,
  "article_id" INT NOT NULL REFERENCES "article" ("id") ON DELETE CASCADE,
  PRIMARY KEY ("team_id", "article_id")
);

CREATE TABLE "comment" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "commentable_id" INT NOT NULL,
  "commentable_type" interactive_type NOT NULL,
  "content" TEXT NOT NULL,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("content") <= 10000)
);

CREATE TABLE "reaction_type" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" TEXT UNIQUE NOT NULL,
  CHECK(LENGTH("name") <= 64)
);

CREATE TABLE "reaction" (
  "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "reactable_id" INT NOT NULL,
  "reactable_type" interactive_type NOT NULL,
  "reaction_type_id" INT NOT NULL REFERENCES "reaction_type" ("id") ON DELETE CASCADE,
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  PRIMARY KEY ("user_id", "reactable_id", "reactable_type")
);

CREATE TABLE "event" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "creator_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "name" TEXT NOT NULL,
  "headline" TEXT DEFAULT (NULL),
  "description" TEXT DEFAULT (NULL),
  "start_at" TIMESTAMPTZ NOT NULL,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT (NOW()),
  "updated_at" TIMESTAMPTZ DEFAULT (NULL),
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  CHECK(LENGTH("name") <= 64),
  CHECK(LENGTH("headline") <= 64)
);

CREATE TABLE "team_event" (
  "team_id" INT NOT NULL REFERENCES "team" ("id") ON DELETE CASCADE,
  "event_id" INT NOT NULL REFERENCES "event" ("id") ON DELETE CASCADE,
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  PRIMARY KEY ("team_id", "event_id")
);

CREATE TABLE "user_event" (
  "user_id" INT NOT NULL REFERENCES "user" ("id") ON DELETE CASCADE,
  "event_id" INT NOT NULL REFERENCES "event" ("id") ON DELETE CASCADE,
  "status" participation_status NOT NULL,
  "deleted_at" TIMESTAMPTZ DEFAULT (NULL),
  PRIMARY KEY ("user_id", "event_id")
);

CREATE TABLE "session" (
  "token" TEXT UNIQUE PRIMARY KEY NOT NULL,
  "data" hstore NOT NULL,
  "expires_at" TIMESTAMPTZ NOT NULL
);

CREATE VIEW "active_session" AS
SELECT * FROM "session"
WHERE NOW() < "expires_at";

CREATE VIEW "inactive_session" AS
SELECT * FROM "session"
WHERE NOW() >= "expires_at";

CREATE VIEW "active_user" AS
SELECT * FROM "user"
WHERE "deleted_at" IS NULL;

CREATE VIEW "inactive_user" AS
SELECT * FROM "user"
WHERE "deleted_at" IS NOT NULL;

CREATE VIEW "active_article" AS
SELECT * FROM "article"
WHERE "deleted_at" IS NULL;

CREATE VIEW "active_comment" AS
SELECT * FROM "comment"
WHERE "deleted_at" IS NULL;

CREATE FUNCTION cascade_soft_delete_user()
RETURNS TRIGGER AS $cascade_soft_delete_user$
  BEGIN
    UPDATE "article"
    SET "deleted_at" = NEW.deleted_at
    WHERE "id" IN (
      SELECT "article_id"
      FROM "article_author"
      WHERE "author_id" = NEW.id
    ) AND (
      SELECT COUNT(*)
      FROM "article_author"
      JOIN "user" ON "user"."id" = "article_author"."author_id"
      WHERE "article_author"."article_id" = "article"."id"
      AND "user"."deleted_at" IS NULL
    ) = 0;

    UPDATE "article_author"
    SET "deleted_at" = NEW.deleted_at
    WHERE "author_id" = NEW.id;

    UPDATE "comment"
    SET "deleted_at" = NEW.deleted_at
    WHERE "user_id" = NEW.id;

    UPDATE "team"
    SET "owner_id" = NULL
    WHERE "owner_id" = NEW.id;

    UPDATE "user_team"
    SET "deleted_at" = NEW.deleted_at
    WHERE "user_id" = NEW.id;

    UPDATE "media"
    SET "deleted_at" = NEW.deleted_at
    WHERE "uploader_id" = NEW.id;

    UPDATE "user_event"
    SET "deleted_at" = NEW.deleted_at
    WHERE "user_id" = NEW.id;

    UPDATE "reaction"
    SET "deleted_at" = NEW.deleted_at
    WHERE "user_id" = NEW.id;

    UPDATE "external_site"
    SET "deleted_at" = NEW.deleted_at
    WHERE "holder_id" = NEW.id
    AND "holder_type" = 'user';

    UPDATE "user_programming_skill"
    SET "deleted_at" = NEW.deleted_at
    WHERE "user_id" = NEW.id;

  RETURN NEW;
  END;
$cascade_soft_delete_user$ LANGUAGE plpgsql;

CREATE TRIGGER cascade_soft_delete_user_trigger
AFTER UPDATE ON "user"
FOR EACH ROW
WHEN (NEW.deleted_at IS NOT NULL AND OLD.deleted_at IS NULL)
EXECUTE FUNCTION cascade_soft_delete_user();
