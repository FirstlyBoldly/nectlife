// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AgentType string

const (
	AgentTypeUser AgentType = "user"
	AgentTypeTeam AgentType = "team"
)

func (e *AgentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AgentType(s)
	case string:
		*e = AgentType(s)
	default:
		return fmt.Errorf("unsupported scan type for AgentType: %T", src)
	}
	return nil
}

type NullAgentType struct {
	AgentType AgentType
	Valid     bool // Valid is true if AgentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAgentType) Scan(value interface{}) error {
	if value == nil {
		ns.AgentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AgentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAgentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AgentType), nil
}

type InteractiveType string

const (
	InteractiveTypeArticle InteractiveType = "article"
	InteractiveTypeComment InteractiveType = "comment"
	InteractiveTypeEvent   InteractiveType = "event"
)

func (e *InteractiveType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InteractiveType(s)
	case string:
		*e = InteractiveType(s)
	default:
		return fmt.Errorf("unsupported scan type for InteractiveType: %T", src)
	}
	return nil
}

type NullInteractiveType struct {
	InteractiveType InteractiveType
	Valid           bool // Valid is true if InteractiveType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInteractiveType) Scan(value interface{}) error {
	if value == nil {
		ns.InteractiveType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InteractiveType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInteractiveType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InteractiveType), nil
}

type InvitationStatus string

const (
	InvitationStatusPending  InvitationStatus = "pending"
	InvitationStatusAccepted InvitationStatus = "accepted"
	InvitationStatusExpired  InvitationStatus = "expired"
)

func (e *InvitationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitationStatus(s)
	case string:
		*e = InvitationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitationStatus: %T", src)
	}
	return nil
}

type NullInvitationStatus struct {
	InvitationStatus InvitationStatus
	Valid            bool // Valid is true if InvitationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvitationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvitationStatus), nil
}

type MediableType string

const (
	MediableTypeUser         MediableType = "user"
	MediableTypeArticle      MediableType = "article"
	MediableTypeTeam         MediableType = "team"
	MediableTypeEvent        MediableType = "event"
	MediableTypeComment      MediableType = "comment"
	MediableTypeExternalSite MediableType = "external_site"
)

func (e *MediableType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediableType(s)
	case string:
		*e = MediableType(s)
	default:
		return fmt.Errorf("unsupported scan type for MediableType: %T", src)
	}
	return nil
}

type NullMediableType struct {
	MediableType MediableType
	Valid        bool // Valid is true if MediableType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediableType) Scan(value interface{}) error {
	if value == nil {
		ns.MediableType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediableType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediableType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediableType), nil
}

type ParticipationStatus string

const (
	ParticipationStatusAttending         ParticipationStatus = "attending"
	ParticipationStatusNoLongerAttending ParticipationStatus = "no_longer_attending"
)

func (e *ParticipationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ParticipationStatus(s)
	case string:
		*e = ParticipationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ParticipationStatus: %T", src)
	}
	return nil
}

type NullParticipationStatus struct {
	ParticipationStatus ParticipationStatus
	Valid               bool // Valid is true if ParticipationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullParticipationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ParticipationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ParticipationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullParticipationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ParticipationStatus), nil
}

type TaggableType string

const (
	TaggableTypeArticle TaggableType = "article"
	TaggableTypeTeam    TaggableType = "team"
	TaggableTypeEvent   TaggableType = "event"
)

func (e *TaggableType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaggableType(s)
	case string:
		*e = TaggableType(s)
	default:
		return fmt.Errorf("unsupported scan type for TaggableType: %T", src)
	}
	return nil
}

type NullTaggableType struct {
	TaggableType TaggableType
	Valid        bool // Valid is true if TaggableType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaggableType) Scan(value interface{}) error {
	if value == nil {
		ns.TaggableType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaggableType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaggableType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaggableType), nil
}

type UserStatus string

const (
	UserStatusActive      UserStatus = "active"
	UserStatusSuspended   UserStatus = "suspended"
	UserStatusDeactivated UserStatus = "deactivated"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type ActiveArticle struct {
	ID           int32
	Title        string
	MarkdownText string
	IsPublic     bool
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type ActiveComment struct {
	ID              int32
	UserID          int32
	CommentableID   int32
	CommentableType InteractiveType
	Content         string
	CreatedAt       pgtype.Timestamptz
	DeletedAt       pgtype.Timestamptz
}

type ActiveSession struct {
	Token     string
	Data      pgtype.Hstore
	ExpiresAt pgtype.Timestamptz
}

type ActiveUser struct {
	ID           int32
	CourseID     int32
	RoleID       int32
	StudentID    string
	FirstName    string
	MiddleName   pgtype.Text
	LastName     string
	DisplayName  pgtype.Text
	Headline     pgtype.Text
	Description  pgtype.Text
	Email        string
	PasswordHash string
	Status       UserStatus
	CreatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type Article struct {
	ID           int32
	Title        string
	MarkdownText string
	IsPublic     bool
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type ArticleAuthor struct {
	ArticleID int32
	AuthorID  int32
}

type Comment struct {
	ID              int32
	UserID          int32
	CommentableID   int32
	CommentableType InteractiveType
	Content         string
	CreatedAt       pgtype.Timestamptz
	DeletedAt       pgtype.Timestamptz
}

type Course struct {
	ID           int32
	DepartmentID pgtype.Int4
	KeyName      string
}

type CourseTranslation struct {
	CourseID     int32
	LanguageCode string
	Name         string
}

type Department struct {
	ID        int32
	FacultyID pgtype.Int4
	KeyName   string
}

type DepartmentTranslation struct {
	DepartmentID int32
	LanguageCode string
	Name         string
}

type Event struct {
	ID          int32
	CreatorID   int32
	Name        string
	Headline    pgtype.Text
	Description pgtype.Text
	StartAt     pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
}

type ExternalSite struct {
	ID           int32
	HolderID     int32
	HolderType   AgentType
	ExternalLink string
	Name         string
	Description  pgtype.Text
	DeletedAt    pgtype.Timestamptz
}

type Faculty struct {
	ID      int32
	KeyName string
}

type FacultyTranslation struct {
	FacultyID    int32
	LanguageCode string
	Name         string
}

type InactiveSession struct {
	Token     string
	Data      pgtype.Hstore
	ExpiresAt pgtype.Timestamptz
}

type InactiveUser struct {
	ID           int32
	CourseID     int32
	RoleID       int32
	StudentID    string
	FirstName    string
	MiddleName   pgtype.Text
	LastName     string
	DisplayName  pgtype.Text
	Headline     pgtype.Text
	Description  pgtype.Text
	Email        string
	PasswordHash string
	Status       UserStatus
	CreatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type Invitation struct {
	ID              int32
	InvitedByUserID pgtype.Int4
	StudentID       string
	Email           string
	Token           string
	RoleID          int32
	ExpiresAt       pgtype.Timestamptz
	Status          InvitationStatus
	CreatedAt       pgtype.Timestamptz
}

type Medium struct {
	ID          int32
	UploaderID  int32
	Filename    string
	Filesize    pgtype.Int4
	MimeType    string
	Description string
	CreatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
	FileUrl     string
}

type ObjectMedium struct {
	MediaID    int32
	ObjectID   int32
	ObjectType MediableType
}

type ObjectTag struct {
	ID           int32
	TaggableID   int32
	TaggableType TaggableType
	TagTypeID    int32
}

type Permission struct {
	ID          int32
	KeyName     string
	Description pgtype.Text
}

type PermissionTranslation struct {
	PermissionID int32
	LanguageCode string
	Name         string
	Description  pgtype.Text
}

type ProgrammingSkill struct {
	ID           int32
	Name         string
	ExternalLink pgtype.Text
}

type Reaction struct {
	UserID         int32
	ReactableID    int32
	ReactableType  InteractiveType
	ReactionTypeID int32
	DeletedAt      pgtype.Timestamptz
}

type ReactionType struct {
	ID   int32
	Name string
}

type Role struct {
	ID          int32
	KeyName     string
	Description pgtype.Text
}

type RolePermission struct {
	RoleID       int32
	PermissionID int32
}

type RoleTranslation struct {
	RoleID       int32
	LanguageCode string
	Name         string
	Description  pgtype.Text
}

type Session struct {
	Token     string
	Data      pgtype.Hstore
	ExpiresAt pgtype.Timestamptz
	ID        int32
}

type TagType struct {
	ID   int32
	Name string
}

type Team struct {
	ID          int32
	Name        string
	OwnerID     pgtype.Int4
	Headline    pgtype.Text
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	DeletedAt   pgtype.Timestamptz
}

type TeamArticle struct {
	TeamID    int32
	ArticleID int32
}

type TeamEvent struct {
	TeamID    int32
	EventID   int32
	DeletedAt pgtype.Timestamptz
}

type User struct {
	ID           int32
	CourseID     int32
	RoleID       int32
	StudentID    string
	FirstName    string
	MiddleName   pgtype.Text
	LastName     string
	DisplayName  pgtype.Text
	Headline     pgtype.Text
	Description  pgtype.Text
	Email        string
	PasswordHash string
	Status       UserStatus
	CreatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
}

type UserEvent struct {
	UserID    int32
	EventID   int32
	Status    ParticipationStatus
	DeletedAt pgtype.Timestamptz
}

type UserProgrammingSkill struct {
	UserID             int32
	ProgrammingSkillID int32
	Duration           pgtype.Int4
	DeletedAt          pgtype.Timestamptz
}

type UserTeam struct {
	UserID    int32
	TeamID    int32
	DeletedAt pgtype.Timestamptz
}
