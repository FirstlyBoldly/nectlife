// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: session_queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "session" (
  "token", "data", "expires_at"
) VALUES (
  $1, $2, $3
) RETURNING token, data, expires_at, id
`

type CreateSessionParams struct {
	Token     string
	Data      pgtype.Hstore
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.Token, arg.Data, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Data,
		&i.ExpiresAt,
		&i.ID,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "session"
WHERE "token" = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSession, token)
	return err
}

const garbageCollect = `-- name: GarbageCollect :exec
DELETE FROM "session"
WHERE "expires_at" >= NOW()
`

func (q *Queries) GarbageCollect(ctx context.Context) error {
	_, err := q.db.Exec(ctx, garbageCollect)
	return err
}

const getSession = `-- name: GetSession :one
SELECT token, data, expires_at, id FROM "session"
WHERE "token" = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Data,
		&i.ExpiresAt,
		&i.ID,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT token, data, expires_at, id FROM "session"
ORDER BY "expires_at"
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.Token,
			&i.Data,
			&i.ExpiresAt,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE "session"
SET "token" = $2,
"data" = $3,
"expires_at" = $4
WHERE "id" = $1
RETURNING token, data, expires_at, id
`

type UpdateSessionParams struct {
	ID        int32
	Token     string
	Data      pgtype.Hstore
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession,
		arg.ID,
		arg.Token,
		arg.Data,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.Data,
		&i.ExpiresAt,
		&i.ID,
	)
	return i, err
}
