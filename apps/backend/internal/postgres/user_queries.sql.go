// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  "course_id",
  "role_id",
  "student_id",
  "first_name",
  "last_name",
  "email",
  "password_hash"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, course_id, role_id, student_id, first_name, middle_name, last_name, display_name, headline, description, email, password_hash, status, created_at, deleted_at
`

type CreateUserParams struct {
	CourseID     int32
	RoleID       int32
	StudentID    string
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.CourseID,
		arg.RoleID,
		arg.StudentID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.RoleID,
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.DisplayName,
		&i.Headline,
		&i.Description,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const flushUsers = `-- name: FlushUsers :exec
DELETE FROM "user" CASCADE
`

func (q *Queries) FlushUsers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, flushUsers)
	return err
}

const getActiveUser = `-- name: GetActiveUser :one
SELECT id, course_id, role_id, student_id, first_name, middle_name, last_name, display_name, headline, description, email, password_hash, status, created_at, deleted_at FROM "active_user"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetActiveUser(ctx context.Context, id int32) (ActiveUser, error) {
	row := q.db.QueryRow(ctx, getActiveUser, id)
	var i ActiveUser
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.RoleID,
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.DisplayName,
		&i.Headline,
		&i.Description,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPasswordHashByStudentId = `-- name: GetPasswordHashByStudentId :one
SELECT "password_hash"
FROM "user"
WHERE "student_id" = $1
LIMIT 1
`

func (q *Queries) GetPasswordHashByStudentId(ctx context.Context, studentID string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordHashByStudentId, studentID)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const getUser = `-- name: GetUser :one
SELECT id, course_id, role_id, student_id, first_name, middle_name, last_name, display_name, headline, description, email, password_hash, status, created_at, deleted_at FROM "user"
WHERE "id" = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.RoleID,
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.DisplayName,
		&i.Headline,
		&i.Description,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByStudentId = `-- name: GetUserByStudentId :one
SELECT id, course_id, role_id, student_id, first_name, middle_name, last_name, display_name, headline, description, email, password_hash, status, created_at, deleted_at FROM "user"
WHERE "student_id" = $1 LIMIT 1
`

func (q *Queries) GetUserByStudentId(ctx context.Context, studentID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByStudentId, studentID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.RoleID,
		&i.StudentID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.DisplayName,
		&i.Headline,
		&i.Description,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserIdByStudentId = `-- name: GetUserIdByStudentId :one
SELECT "id" FROM "user"
WHERE "student_id" = $1 LIMIT 1
`

func (q *Queries) GetUserIdByStudentId(ctx context.Context, studentID string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserIdByStudentId, studentID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, course_id, role_id, student_id, first_name, middle_name, last_name, display_name, headline, description, email, password_hash, status, created_at, deleted_at FROM "active_user"
ORDER BY "last_name", "first_name"
`

func (q *Queries) ListActiveUsers(ctx context.Context) ([]ActiveUser, error) {
	rows, err := q.db.Query(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActiveUser
	for rows.Next() {
		var i ActiveUser
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.RoleID,
			&i.StudentID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.DisplayName,
			&i.Headline,
			&i.Description,
			&i.Email,
			&i.PasswordHash,
			&i.Status,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, course_id, role_id, student_id, first_name, middle_name, last_name, display_name, headline, description, email, password_hash, status, created_at, deleted_at FROM "user"
ORDER BY "last_name", "first_name"
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.RoleID,
			&i.StudentID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.DisplayName,
			&i.Headline,
			&i.Description,
			&i.Email,
			&i.PasswordHash,
			&i.Status,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const permaDeleteUser = `-- name: PermaDeleteUser :exec
DELETE FROM "user"
WHERE "id" = $1
`

func (q *Queries) PermaDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, permaDeleteUser, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE "user"
SET "deleted_at" = NOW()
WHERE "id" = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET "course_id" = $2,
"role_id" = $3,
"student_id" = $4,
"first_name" = $5,
"middle_name" = $6,
"last_name" = $7,
"display_name" = $8,
"headline" = $9,
"description" = $10,
"email" = $11,
"password_hash" = $12,
"status" = $13
WHERE "id" = $1
`

type UpdateUserParams struct {
	ID           int32
	CourseID     int32
	RoleID       int32
	StudentID    string
	FirstName    string
	MiddleName   pgtype.Text
	LastName     string
	DisplayName  pgtype.Text
	Headline     pgtype.Text
	Description  pgtype.Text
	Email        string
	PasswordHash string
	Status       UserStatus
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.CourseID,
		arg.RoleID,
		arg.StudentID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.DisplayName,
		arg.Headline,
		arg.Description,
		arg.Email,
		arg.PasswordHash,
		arg.Status,
	)
	return err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS (
  SELECT 1
  FROM "user"
  WHERE "id" = $1
)
`

func (q *Queries) UserExists(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
