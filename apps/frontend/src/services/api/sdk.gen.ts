// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, LogoutErrors, RegisterData, RegisterResponses, RegisterErrors, StatusData, StatusResponses, StatusErrors, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login user
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout user
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? client).get<LogoutResponses, LogoutErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * Register a new user
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Session status
 * Returns a boolean indicating if a session is authenticated and the session data
 */
export const status = <ThrowOnError extends boolean = false>(options?: Options<StatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<StatusResponses, StatusErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/auth/status',
        ...options
    });
};

/**
 * List all existing user instances
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users',
        ...options
    });
};

/**
 * Create a new user instance
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user instance
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Get a user instance by its id
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options
    });
};

/**
 * Update a user instance
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sess_tkn',
                type: 'apiKey'
            }
        ],
        url: '/api/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
